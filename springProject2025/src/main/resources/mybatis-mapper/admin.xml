<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	
	<mapper namespace="com.example.springProject2025.mapper.AdminMapper">
		
		<!-- 상품 문의내역 전체 개수 조회 -->
		<select id="selectInquiryListCount" parameterType="hashmap" resultType="int">
		    SELECT COUNT(*)
		    FROM PRODUCT_INQUIRY I
		    INNER JOIN USERS U ON I.USER_ID = U.USER_ID
		    <where>
		        <if test="keyword != null and keyword != ''">
		            AND (I.TITLE LIKE '%' || #{keyword} || '%' 
		            OR U.NAME LIKE '%' || #{keyword} || '%'
		            OR I.USER_ID LIKE '%' || #{keyword} || '%')
		        </if>
		        <if test="statusOption != null and statusOption != ''">
		            AND I.STATUS = #{statusOption}
		        </if>
		        <if test="startDate != null and startDate != ''">
		            AND I.CDATE >= TO_DATE(#{startDate}, 'YYYY-MM-DD')
		        </if>
		        <if test="endDate != null and endDate != ''">
		            AND I.CDATE &lt;= TO_DATE(#{endDate}, 'YYYY-MM-DD') + 0.99999
		        </if>
		    </where>
		</select>
		
		<!-- 상품 문의내역 리스트 불러오기 (페이징 적용) -->
		<select id="selectInquiryList" parameterType="hashmap" resultType="com.example.springProject2025.model.Admin">
		    SELECT *
		    FROM (
		        SELECT SUB.*, ROWNUM AS RN
		        FROM (
		            SELECT I.*, U.NAME
		            FROM PRODUCT_INQUIRY I
		            INNER JOIN USERS U ON I.USER_ID = U.USER_ID
		            <where>
		                <if test="keyword != null and keyword != ''">
		                    AND (I.TITLE LIKE '%' || #{keyword} || '%' 
		                    OR U.NAME LIKE '%' || #{keyword} || '%'
		                    OR I.USER_ID LIKE '%' || #{keyword} || '%')
		                </if>
		                <if test="statusOption != null and statusOption != ''">
		                    AND I.STATUS = #{statusOption}
		                </if>
		                <if test="startDate != null and startDate != ''">
		                    AND I.CDATE >= TO_DATE(#{startDate}, 'YYYY-MM-DD')
		                </if>
		                <if test="endDate != null and endDate != ''">
		                    AND I.CDATE &lt;= TO_DATE(#{endDate}, 'YYYY-MM-DD') + 0.99999
		                </if>
		            </where>
		            ORDER BY I.INQUIRY_NO DESC
		        ) SUB
		    ) 
		    WHERE RN > #{startIndex} AND RN &lt;= #{startIndex} + #{pageSize}
		</select>
		
		<!-- 상품 문의내역 상세보기 -->
		<select id="selectInquiry" parameterType="hashmap" resultType="com.example.springProject2025.model.Admin">
			SELECT I.*, U.NAME
			FROM PRODUCT_INQUIRY I
			INNER JOIN USERS U ON I.USER_ID = U.USER_ID
			WHERE INQUIRY_NO = #{inquiryNo}
		</select>
		
		<!-- 상품 문의내역 관리자 답변 등록/수정 -->
		<update id="updateInquiryAnswer" parameterType="hashmap">
			UPDATE PRODUCT_INQUIRY
			SET 
				ANSWER = #{answer},
				ANSWER_DATE = SYSDATE,
				STATUS = 'Y'
			WHERE 
				INQUIRY_NO = #{inquiryNo}
		</update>
		
		
		<!-- 주문 목록 개수 조회 -->
		<select id="selectOrdersListCount" parameterType="hashmap" resultType="int">
		    SELECT COUNT(*)
		    FROM ORDERS O
		    INNER JOIN USERS U ON O.USER_ID = U.USER_ID
		    <where>
		        <if test="keyword != null and keyword != ''">
		            AND (U.NAME LIKE '%' || #{keyword} || '%'
		            OR O.USER_ID LIKE '%' || #{keyword} || '%'
		            OR O.ORDER_NO LIKE '%' || #{keyword} || '%')
		        </if>
		        <if test="statusOption != null and statusOption != ''">
		            AND O.STATUS = #{statusOption}
		        </if>
		        <if test="startDate != null and startDate != ''">
		            AND O.CDATE >= TO_DATE(#{startDate}, 'YYYY-MM-DD')
		        </if>
		        <if test="endDate != null and endDate != ''">
		            AND O.CDATE &lt;= TO_DATE(#{endDate}, 'YYYY-MM-DD') + 0.99999
		        </if>
		        AND O.STATUS IN ('신규주문', '배송중', '배송완료')
		    </where>
		</select>
		
		<!-- 주문 목록 조회 (페이징 적용) -->
		<select id="selectOrdersList" parameterType="hashmap" resultType="com.example.springProject2025.model.Admin">
		    SELECT *
		    FROM (
		        SELECT SUB.*, ROWNUM AS RN
		        FROM (
		            SELECT O.ORDER_NO, O.USER_ID, U.NAME, O.PRODUCT_NO, O.QUANTITY,
		                   O.PAYMENT_AMOUNT, O.ADDR, O.PAYMENT_METHOD, O.STATUS,
		                   TO_CHAR(O.CDATE, 'YYYY-MM-DD') AS CDATE,
		                   TO_CHAR(O.UDATE, 'YYYY-MM-DD') AS UDATE,
		                   O.BECAUSE, O.ORDER_REQUEST
		            FROM ORDERS O
		            INNER JOIN USERS U ON O.USER_ID = U.USER_ID
		            <where>
		                <if test="keyword != null and keyword != ''">
		                    AND (U.NAME LIKE '%' || #{keyword} || '%'
		                    OR O.USER_ID LIKE '%' || #{keyword} || '%'
		                    OR O.ORDER_NO LIKE '%' || #{keyword} || '%'
		                    OR O.PRODUCT_NO LIKE '%' || #{keyword} || '%')
		                </if>
		                <if test="statusOption != null and statusOption != ''">
		                    AND O.STATUS = #{statusOption}
		                </if>
		                <if test="startDate != null and startDate != ''">
		                    AND O.CDATE >= TO_DATE(#{startDate}, 'YYYY-MM-DD')
		                </if>
		                <if test="endDate != null and endDate != ''">
		                    AND O.CDATE &lt;= TO_DATE(#{endDate}, 'YYYY-MM-DD') + 0.99999
		                </if>
		                AND O.STATUS IN ('신규주문', '배송중', '배송완료')
		            </where>
		            ORDER BY O.ORDER_NO DESC
		        ) SUB
		    )
		    WHERE RN > #{startIndex} AND RN &lt;= #{startIndex} + #{pageSize}
		</select>
		
		<!-- 주문 상태 업데이트 -->
		<update id="updateOrderStatus" parameterType="hashmap">
		    UPDATE ORDERS
		    SET STATUS = #{newStatus},
		        UDATE = SYSDATE
		    WHERE ORDER_NO = #{orderNo}
		</update>
		
		
		<!-- 회원 목록 개수 조회 -->
		<select id="selectUserListCount" parameterType="hashmap" resultType="int">
		    SELECT COUNT(*)
		    FROM USERS
		    <where>
		        <if test="keyword != null and keyword != ''">
		            <choose>
		                <when test="sortColumn == 'USER_ID'">
		                    AND USER_ID LIKE '%' || #{keyword} || '%'
		                </when>
		                <when test="sortColumn == 'NAME'">
		                    AND NAME LIKE '%' || #{keyword} || '%'
		                </when>
		                <when test="sortColumn == 'NICKNAME'">
		                    AND NICKNAME LIKE '%' || #{keyword} || '%'
		                </when>
		                <otherwise>
		                    AND (USER_ID LIKE '%' || #{keyword} || '%'
		                    OR NAME LIKE '%' || #{keyword} || '%'
		                    OR NICKNAME LIKE '%' || #{keyword} || '%')
		                </otherwise>
		            </choose>
		        </if>
		        <!-- statusOption 등 다른 필터가 있다면 여기에 추가 -->
		    </where>
		</select>
		
		<!-- 회원 목록 조회 (페이징, 검색, 정렬 적용) -->
		<select id="selectUserList" parameterType="hashmap" resultType="com.example.springProject2025.model.Admin">
		    SELECT *
		    FROM (
		        SELECT SUB.*, ROWNUM AS RN
		        FROM (
		            SELECT USER_ID, NAME, NICKNAME, EMAIL, TO_CHAR(CDATE, 'YYYY-MM-DD') AS CDATE
		            FROM USERS
		            <where>
		                <if test="keyword != null and keyword != ''">
		                    <choose>
		                        <when test="sortColumn == 'USER_ID'">
		                            AND USER_ID LIKE '%' || #{keyword} || '%'
		                        </when>
		                        <when test="sortColumn == 'NAME'">
		                            AND NAME LIKE '%' || #{keyword} || '%'
		                        </when>
		                        <when test="sortColumn == 'NICKNAME'">
		                            AND NICKNAME LIKE '%' || #{keyword} || '%'
		                        </when>
		                        <otherwise>
		                            AND (USER_ID LIKE '%' || #{keyword} || '%'
		                            OR NAME LIKE '%' || #{keyword} || '%'
		                            OR NICKNAME LIKE '%' || #{keyword} || '%')
		                        </otherwise>
		                    </choose>
		                </if>
		            </where>
		            <!-- 정렬 기준 -->
		            <if test="sortColumn != null and sortColumn != ''">
		                ORDER BY
		                <choose>
		                    <when test="sortColumn == 'USER_ID'">USER_ID ASC</when>
		                    <when test="sortColumn == 'NAME'">NAME ASC</when>
		                    <when test="sortColumn == 'NICKNAME'">NICKNAME ASC</when>
		                    <otherwise>CDATE DESC</otherwise> <!-- 기본 정렬 -->
		                </choose>
		            </if>
		            <if test="sortColumn == null or sortColumn == ''">
		                ORDER BY CDATE DESC
		            </if>
		        ) SUB
		    )
		    WHERE RN > #{startIndex} AND RN &lt;= #{startIndex} + #{pageSize}
		</select>
		
		<!-- 회원 상세 정보 조회 -->
		<select id="selectUserDetail" parameterType="hashmap" resultType="com.example.springProject2025.model.Admin">
		    SELECT USER_ID, PWD, NAME, NICKNAME, GENDER, EMAIL, ADDR, BIRTH, PHONE,
		           TO_CHAR(CDATE, 'YYYY-MM-DD HH24:MI:SS') AS CDATE,
		           TO_CHAR(UDATE, 'YYYY-MM-DD HH24:MI:SS') AS UDATE,
		           USERTYPE
		    FROM USERS
		    WHERE USER_ID = #{userId}
		</select>
		
		<!-- 회원 삭제 -->
		<delete id="deleteUser" parameterType="hashmap">
		    DELETE FROM USERS
		    WHERE USER_ID = #{userId}
		</delete>
		
		<!-- 교환/반품/취소 목록 개수 조회 -->
		<select id="selectRefundReturnListCount" parameterType="hashmap" resultType="int">
		    SELECT COUNT(O.ORDER_NO)
		    FROM ORDERS O
		    JOIN PRODUCT P ON O.PRODUCT_NO = P.PRODUCT_NO
		    JOIN USERS U ON O.USER_ID = U.USER_ID
		    <where>
		        O.STATUS IN ('교환요청', '교환완료', '취소요청', '취소완료', '반품요청', '반품완료')
		        <if test="keyword != null and keyword != ''">
		            AND (P.PRODUCT_NAME LIKE '%' || #{keyword} || '%'
		            OR O.USER_ID LIKE '%' || #{keyword} || '%'
		            OR U.NAME LIKE '%' || #{keyword} || '%'
		            OR O.ORDER_NO LIKE '%' || #{keyword} || '%')
		        </if>
		        <if test="statusOption != null and statusOption != ''">
		            AND O.STATUS = #{statusOption}
		        </if>
		        <if test="startDate != null and startDate != ''">
		            AND O.UDATE >= TO_DATE(#{startDate}, 'YYYY-MM-DD')
		        </if>
		        <if test="endDate != null and endDate != ''">
		            AND O.UDATE &lt;= TO_DATE(#{endDate}, 'YYYY-MM-DD') + 0.99999
		        </if>
		    </where>
		</select>
		
		<!-- 교환/반품/취소 목록 조회 -->
		<select id="selectRefundReturnList" parameterType="hashmap" resultType="com.example.springProject2025.model.Admin">
		    SELECT *
		    FROM (
		        SELECT SUB.*, ROWNUM AS RN
		        FROM (
		            SELECT
		                O.ORDER_NO,
		                P.PRODUCT_NAME,
		                O.USER_ID,
		                U.NAME,
		                U.PHONE,
		                TO_CHAR(O.UDATE, 'YYYY-MM-DD') AS UDATE,
		                O.STATUS,
		                O.PRODUCT_NO, <!-- 교환 처리 시 필요 -->
		                O.QUANTITY,   <!-- 교환 처리 시 필요 -->
		                O.BECAUSE     <!-- 교환/반품/취소 사유 -->
		            FROM ORDERS O
		            JOIN PRODUCT P ON O.PRODUCT_NO = P.PRODUCT_NO
		            JOIN USERS U ON O.USER_ID = U.USER_ID
		            <where>
		                O.STATUS IN ('교환요청', '교환완료', '취소요청', '취소완료', '반품요청', '반품완료')
		                <if test="keyword != null and keyword != ''">
		                    AND (P.PRODUCT_NAME LIKE '%' || #{keyword} || '%'
		                    OR O.USER_ID LIKE '%' || #{keyword} || '%'
		                    OR U.NAME LIKE '%' || #{keyword} || '%'
		                    OR O.ORDER_NO LIKE '%' || #{keyword} || '%')
		                </if>
		                <if test="statusOption != null and statusOption != ''">
		                    AND O.STATUS = #{statusOption}
		                </if>
		                <if test="startDate != null and startDate != ''">
		                    AND O.UDATE >= TO_DATE(#{startDate}, 'YYYY-MM-DD')
		                </if>
		                <if test="endDate != null and endDate != ''">
		                    AND O.UDATE &lt;= TO_DATE(#{endDate}, 'YYYY-MM-DD') + 0.99999
		                </if>
		            </where>
		            ORDER BY O.UDATE DESC, O.ORDER_NO DESC
		        ) SUB
		    )
		    WHERE RN > #{startIndex} AND RN &lt;= #{startIndex} + #{pageSize}
		</select>
		
		<!-- 교환/반품/취소 상태 업데이트 (일반적인 상태 변경) -->
		<update id="updateRefundReturnStatus" parameterType="hashmap">
		    UPDATE ORDERS
		    SET STATUS = #{status},
		        UDATE = SYSDATE
		    WHERE ORDER_NO = #{orderNo}
		    AND STATUS = #{currentStatus} <!-- 현재 상태와 일치할 때만 업데이트 (안전장치) -->
		</update>
		
		<!-- 특정 주문 번호의 제품 정보(productNo, quantity) 조회 -->
		<select id="selectOrderProductInfo" parameterType="hashmap" resultType="hashmap">
		    SELECT PRODUCT_NO, QUANTITY
		    FROM ORDERS
		    WHERE ORDER_NO = #{orderNo}
		</select>
		
		<!-- 제품 재고 업데이트 (+ 또는 -) -->
		<update id="updateProductStock" parameterType="hashmap">
		    UPDATE PRODUCT
		    SET QUANTITY = QUANTITY + #{quantityChange}
		    WHERE PRODUCT_NO = #{productNo}
		</update>
		
		<!-- 제품 판매량(SELL_COUNT) 업데이트 (+ 또는 -) -->
		<update id="updateProductSellCount" parameterType="hashmap">
		    UPDATE PRODUCT
		    SET SELL_COUNT = SELL_COUNT + #{quantityChange}
		    WHERE PRODUCT_NO = #{productNo}
		</update>
		
		<!-- 주문 상세 정보 전체 조회 (새로운 주문 생성에 재활용하기 위함) -->
		<select id="selectOrderDetailsByOrderNo" parameterType="hashmap" resultType="com.example.springProject2025.model.Admin">
		    SELECT
		        ORDER_NO, USER_ID, PRODUCT_NO, QUANTITY, PAYMENT_AMOUNT,
		        ADDR, PAYMENT_METHOD, STATUS, BECAUSE, ORDER_REQUEST,
		        CDATE, UDATE <!-- CDATE, UDATE도 가져옴 (CDATE는 새 주문에 복사) -->
		    FROM ORDERS
		    WHERE ORDER_NO = #{orderNo}
		</select>
		
		<!-- 새로운 주문 번호 시퀀스 가져오기 (Oracle 예시) -->
		<select id="getNextOrderNoSequence" resultType="int">
		    SELECT ORDERS_SEQ.NEXTVAL FROM DUAL
		</select>
		
		<!-- 교환으로 인한 신규 주문 삽입 -->
		<insert id="insertNewOrderForExchange" parameterType="com.example.springProject2025.model.Admin">
		    INSERT INTO ORDERS (
		        ORDER_NO, USER_ID, CDATE, PRODUCT_NO, QUANTITY,
		        PAYMENT_AMOUNT, ADDR, PAYMENT_METHOD, STATUS, ORDER_REQUEST, UDATE
		        <!-- BECAUSE, UDATE는 null이거나 SYSDATE로 처리되므로 생략 -->
		    ) VALUES (
		        #{orderNo},
		        #{userId},
		        SYSDATE, <!-- 새 주문이므로 현재 시간 -->
		        #{productNo},
		        #{quantity},
		        #{paymentAmount},
		        #{addr},
		        #{paymentMethod},
		        #{status},
		        #{orderRequest},
		        SYSDATE
		    )
		</insert>
		
		<!-- productNo로 제품 상세 정보 조회 -->
		<select id="selectProductByProductNo" parameterType="hashmap" resultType="com.example.springProject2025.model.Admin">
		    SELECT PRODUCT_NO, BRAND, PRODUCT_NAME, PRICE, PRODUCT_SIZE, QUANTITY AS PRODUCT_STOCK <!-- QUANTITY를 PRODUCT_STOCK으로 별칭 -->
		    FROM PRODUCT
		    WHERE PRODUCT_NO = #{productNo}
		</select>
		
		<!-- 동일 브랜드, 제품명(괄호 전 부분)의 모든 관련 제품 옵션 조회 (재고가 0 이상인 것만) -->
		<select id="selectRelatedProductOptions" parameterType="hashmap" resultType="com.example.springProject2025.model.Admin">
		    SELECT
		        PRODUCT_NO,
		        PRODUCT_NAME,   <!-- ex: 러닝 무릎 보호대 (블랙) -->
		        PRODUCT_SIZE,   <!-- ex: M, L, XL -->
		        PRICE,
		        QUANTITY AS PRODUCT_STOCK
		    FROM PRODUCT
		    WHERE BRAND = #{brand}
		    <!-- 기본 제품명과 일치하는지 확인 (괄호 유무 고려) -->
		    AND (
		        (INSTR(PRODUCT_NAME, ' (') > 0 AND SUBSTR(PRODUCT_NAME, 1, INSTR(PRODUCT_NAME, ' (') - 1) = #{baseProductName})
		        OR (INSTR(PRODUCT_NAME, ' (') = 0 AND PRODUCT_NAME = #{baseProductName})
		    )
		    AND QUANTITY > 0
		    ORDER BY PRODUCT_NAME, PRODUCT_SIZE
		</select>
	</mapper>
